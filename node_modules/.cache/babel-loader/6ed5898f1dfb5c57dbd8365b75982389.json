{"ast":null,"code":"var _jsxFileName = \"D:\\\\sales&stock\\\\sales\\\\src\\\\components\\\\pages\\\\Login.jsx\";\nimport React from \"react\";\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { Redirect } from 'react-router';\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn } from 'mdbreact';\nvar isLoggedIn = false;\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleLogin = e => {\n      e.preventDefault();\n      let form = this.refs.myForm;\n\n      if (form.checkValidity() === false) {\n        form.classList.add('was-validated');\n      } else {\n        var options = {\n          method: 'POST',\n          body: JSON.stringify({\n            username: this.state.username,\n            password: this.state.password\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        fetch('/auth', options);\n        this.props.changeUserState(json.user.role_id).then(res => res.json()).then(json => {\n          // console.log(json);\n          let message = json.message;\n          this.refs.loginLabel.innerHTML = message;\n\n          if (message === 'incorrect Password') {\n            this.password.value = \"\";\n            this.password.focus();\n          } else if (message === \"username doesn't exist\") {\n            this.username.value = '';\n            this.username.focus();\n          } else {\n            isLoggedIn = true;\n            console.log(json.user.role_id);\n          }\n        }).catch(err => console.log(err));\n      }\n    };\n\n    this.onChangeLabel = () => {\n      this.refs.loginLabel.innerHTML = '';\n    };\n\n    this.state = {\n      username: '',\n      password: ''\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  render() {\n    if (isLoggedIn) {\n      return React.createElement(Redirect, {\n        to: \"/home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    } else return React.createElement(MDBContainer, {\n      className: \" mt-5 pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      className: \" mt-5 pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      md: \"6\",\n      className: \"mx-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      ref: \"myForm\",\n      style: {\n        marginTop: '100px'\n      },\n      onSubmit: this.handleLogin,\n      noValidate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"h5 text-center mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Sign in\"), React.createElement(\"div\", {\n      className: \"grey-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"Username\",\n      name: \"username\",\n      icon: \"user\",\n      value: this.state.username,\n      onInput: this.handleInput,\n      onChange: this.onChangeLabel,\n      group: true,\n      type: \"text\",\n      error: \"wrong\",\n      success: \"right\",\n      inputRef: ref => this.username = ref,\n      required: true,\n      validate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"valid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Looks good!\"), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Please provide a Name.\")), React.createElement(MDBInput, {\n      label: \"Password\",\n      name: \"password\",\n      icon: \"lock\",\n      value: this.state.password,\n      onInput: this.handleInput,\n      inputRef: ref => this.password = ref,\n      onChange: this.onChangeLabel,\n      group: true,\n      type: \"password\",\n      required: true,\n      validate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"valid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Looks good!\"), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Please provide a Password.\"))), React.createElement(\"label\", {\n      ref: \"loginLabel\",\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Login\"))))));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["D:\\sales&stock\\sales\\src\\components\\pages\\Login.jsx"],"names":["React","Redirect","MDBContainer","MDBRow","MDBCol","MDBInput","MDBBtn","isLoggedIn","LoginForm","Component","constructor","props","handleInput","e","setState","target","name","value","handleLogin","preventDefault","form","refs","myForm","checkValidity","classList","add","options","method","body","JSON","stringify","username","state","password","headers","fetch","changeUserState","json","user","role_id","then","res","message","loginLabel","innerHTML","focus","console","log","catch","err","onChangeLabel","bind","render","marginTop","ref","color"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport { Redirect } from 'react-router'\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn } from 'mdbreact';\r\n\r\nvar isLoggedIn = false\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        }\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n    handleInput = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleLogin = (e) => {\r\n        e.preventDefault();\r\n        let form = this.refs.myForm;\r\n        if (form.checkValidity() === false) {\r\n            form.classList.add('was-validated');\r\n        }\r\n        else {\r\n            var options = {\r\n                method: 'POST',\r\n                body: JSON.stringify({ username: this.state.username, password: this.state.password }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n            fetch('/auth', options)\r\n            this.props.changeUserState(json.user.role_id)\r\n                .then((res) => res.json())\r\n                .then((json) => {\r\n                    // console.log(json);\r\n                    let message = json.message;\r\n                    this.refs.loginLabel.innerHTML = message;\r\n                    if (message === 'incorrect Password') {\r\n                        this.password.value = \"\";\r\n                        this.password.focus();\r\n                    }\r\n                    else if (message === `username doesn't exist`) {\r\n                        this.username.value = '';\r\n                        this.username.focus();\r\n                    }\r\n                    else {\r\n                        isLoggedIn = true\r\n                        console.log(json.user.role_id);\r\n\r\n                    }\r\n\r\n                })\r\n                .catch((err) => console.log(err))\r\n        }\r\n\r\n    }\r\n    onChangeLabel = () => {\r\n        this.refs.loginLabel.innerHTML = '';\r\n    }\r\n\r\n\r\n    render() {\r\n        if (isLoggedIn) {\r\n            return <Redirect to='/home' />\r\n        }\r\n        else\r\n            return (\r\n                <MDBContainer className=\" mt-5 pt-5\">\r\n                    <MDBRow className=\" mt-5 pt-5\">\r\n                        <MDBCol md=\"6\" className='mx-auto'>\r\n                            <form ref='myForm' style={{ marginTop: '100px' }} onSubmit={this.handleLogin} noValidate>\r\n                                <p className=\"h5 text-center mb-4\">Sign in</p>\r\n                                <div className=\"grey-text\">\r\n                                    <MDBInput\r\n                                        label=\"Username\"\r\n                                        name=\"username\"\r\n                                        icon=\"user\"\r\n                                        value={this.state.username}\r\n                                        onInput={this.handleInput}\r\n                                        onChange={this.onChangeLabel}\r\n                                        group\r\n                                        type=\"text\"\r\n                                        error=\"wrong\"\r\n                                        success=\"right\"\r\n                                        inputRef={ref => this.username = ref}\r\n                                        required\r\n                                        validate>\r\n                                        <div className=\"valid-feedback\">\r\n                                            Looks good!\r\n                                    </div>\r\n                                        <div className=\"invalid-feedback\">\r\n                                            Please provide a Name.\r\n                                    </div>\r\n                                    </MDBInput>\r\n                                    <MDBInput\r\n                                        label=\"Password\"\r\n                                        name=\"password\"\r\n                                        icon=\"lock\"\r\n                                        value={this.state.password}\r\n                                        onInput={this.handleInput}\r\n                                        inputRef={ref => this.password = ref}\r\n                                        onChange={this.onChangeLabel}\r\n                                        group\r\n                                        type=\"password\"\r\n                                        required\r\n                                        validate>\r\n                                        <div className=\"valid-feedback\">\r\n                                            Looks good!\r\n                                    </div>\r\n                                        <div className=\"invalid-feedback\">\r\n                                            Please provide a Password.\r\n                                    </div>\r\n                                    </MDBInput>\r\n                                </div>\r\n                                <label ref='loginLabel' style={{ color: 'red' }}></label>\r\n                                <div className=\"text-center\">\r\n                                    <MDBBtn type=\"submit\">Login</MDBBtn>\r\n                                </div>\r\n                            </form>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            )\r\n\r\n    }\r\n}\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}