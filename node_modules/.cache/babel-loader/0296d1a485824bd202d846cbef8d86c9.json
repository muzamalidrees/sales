{"ast":null,"code":"import _objectSpread from \"D:\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\sales&stock\\\\sales\\\\src\\\\components\\\\pages\\\\NewUser.jsx\";\nimport React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\nimport Select from 'react-select'; // const roleOptions = [\n//     { value: 'admin', label: 'Admin' },\n//     { value: 'operator', label: 'Operator' }\n// ];\n\nclass NewUser extends Component {\n  constructor() {\n    super();\n    this._isMounted = false;\n\n    this.handleSelectChange = selectedOption => {\n      this.setState({\n        role: selectedOption\n      });\n    };\n\n    this.handleInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let form = this.refs.newUserForm;\n\n      if (form.checkValidity() === false) {\n        form.classList.add('was-validated');\n      } else if (this.state.role === '' || this.state.role === null) {\n        this.setState({\n          role: null\n        });\n        return;\n      } else {\n        console.log(this.state.name, this.state.email, this.state.username, this.state.password, this.state.role, this.state.cell);\n        let name = this.state.name;\n        let email = this.state.email;\n        let cell = this.state.cell;\n        let username = this.state.username;\n        let password = this.state.password;\n        let role = this.state.role;\n        let user = {\n          name: name,\n          email: email,\n          cell: cell,\n          username: username,\n          password: password,\n          role: role\n        };\n        var options = {\n          method: 'POST',\n          body: JSON.stringify(user),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        fetch('/addNewUser', options).then(res => res.json()).then(json => {\n          // console.log(json)\n          if (json.success) {\n            this.setState({\n              role: '',\n              name: '',\n              email: '',\n              cell: '',\n              username: '',\n              password: ''\n            });\n          } else {\n            this.refs.username.focus();\n          }\n\n          this.refs.msglabel.innerHTML = message;\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this._isMounted = true;\n    fetch('/getAllRoles').then(res => res.json()).then(json => {\n      // console.log(json)\n      if (this._isMounted) {\n        this.setState({\n          roleOptions: json.data\n        });\n      }\n    }).catch(error => console.log(error));\n    this.state = {\n      role: '',\n      name: '',\n      email: '',\n      cell: '',\n      username: '',\n      password: '',\n      roleOptions: ''\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const _this$state = this.state,\n          role = _this$state.role,\n          roleOptions = _this$state.roleOptions;\n    const customStyles = {\n      control: (base, state) => _objectSpread({}, base, {\n        borderColor: state.isFocused ? '#ddd' : role !== null ? '#ddd' : 'red',\n        width: '191px'\n      })\n    };\n    return React.createElement(MDBContainer, {\n      className: \"p-0\",\n      style: {\n        border: '1px solid',\n        marginTop: '80px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      center: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      ref: \"newUserForm\",\n      onSubmit: this.handleSubmit,\n      noValidate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"h5 text-center mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"New User\"), React.createElement(\"div\", {\n      className: \"grey-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Name\",\n      name: \"name\",\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Email\",\n      name: \"email\",\n      icon: \"envelope\",\n      group: true,\n      type: \"email\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Phone\",\n      name: \"cell\",\n      icon: \"phone\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Username\",\n      name: \"username\",\n      ref: \"username\",\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Password\",\n      name: \"password\",\n      icon: \"lock\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Select, {\n      styles: customStyles,\n      value: role // value={role}\n      ,\n      onChange: this.handleSelectChange,\n      options: roleOptions,\n      placeholder: \"Role\",\n      isSearchable: true,\n      isClearable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      size: \"sm\",\n      color: \"teal\",\n      outline: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Register\"))))));\n  }\n\n}\n\nexport default NewUser;","map":{"version":3,"sources":["D:\\sales&stock\\sales\\src\\components\\pages\\NewUser.jsx"],"names":["React","Component","MDBContainer","MDBRow","MDBCol","MDBBtn","MDBInput","Select","NewUser","constructor","_isMounted","handleSelectChange","selectedOption","setState","role","handleInput","e","target","name","value","handleSubmit","preventDefault","form","refs","newUserForm","checkValidity","classList","add","state","console","log","email","username","password","cell","user","options","method","body","JSON","stringify","headers","fetch","then","res","json","success","focus","msglabel","innerHTML","message","catch","error","roleOptions","data","componentWillUnmount","render","customStyles","control","base","borderColor","isFocused","width","border","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\r\nimport Select from 'react-select';\r\n\r\n\r\n// const roleOptions = [\r\n//     { value: 'admin', label: 'Admin' },\r\n//     { value: 'operator', label: 'Operator' }\r\n// ];\r\n\r\nclass NewUser extends Component {\r\n    _isMounted = false\r\n    constructor() {\r\n        super();\r\n        this._isMounted = true\r\n        fetch('/getAllRoles')\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                // console.log(json)\r\n                if (this._isMounted) {\r\n                    this.setState({ roleOptions: json.data })\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n        this.state = {\r\n            role: '',\r\n            name: '',\r\n            email: '',\r\n            cell: '',\r\n            username: '',\r\n            password: '',\r\n            roleOptions: ''\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    handleSelectChange = selectedOption => {\r\n        this.setState({\r\n            role: selectedOption\r\n        })\r\n    }\r\n\r\n    handleInput = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let form = this.refs.newUserForm\r\n        if (form.checkValidity() === false) {\r\n            form.classList.add('was-validated');\r\n        }\r\n        else if (this.state.role === '' || this.state.role === null) {\r\n            this.setState({ role: null })\r\n            return\r\n        }\r\n        else {\r\n            console.log(this.state.name, this.state.email, this.state.username, this.state.password,\r\n                this.state.role, this.state.cell);\r\n            let name = this.state.name\r\n            let email = this.state.email\r\n            let cell = this.state.cell\r\n            let username = this.state.username\r\n            let password = this.state.password\r\n            let role = this.state.role\r\n\r\n            let user = { name: name, email: email, cell: cell, username: username, password: password, role: role }\r\n\r\n            var options = {\r\n                method: 'POST',\r\n                body: JSON.stringify(user),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n            fetch('/addNewUser', options)\r\n                .then((res) => res.json())\r\n                .then((json) => {\r\n                    // console.log(json)\r\n                    if (json.success) {\r\n                        this.setState({\r\n                            role: '',\r\n                            name: '',\r\n                            email: '',\r\n                            cell: '',\r\n                            username: '',\r\n                            password: ''\r\n                        })\r\n                    }\r\n                    else {\r\n                        this.refs.username.focus();\r\n                    }\r\n\r\n                    this.refs.msglabel.innerHTML = message;\r\n\r\n\r\n                })\r\n                .catch((error) => console.log(error))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { role, roleOptions } = this.state\r\n        const customStyles = {\r\n            control: (base, state) => ({\r\n                ...base,\r\n                borderColor: state.isFocused ?\r\n                    '#ddd' : role !== null ?\r\n                        '#ddd' : 'red',\r\n                width: '191px',\r\n            })\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <MDBContainer className='p-0' style={{ border: '1px solid', marginTop: '80px' }}>\r\n                <MDBRow center>\r\n                    <MDBCol md=\"6\">\r\n                        <form ref='newUserForm' onSubmit={this.handleSubmit} noValidate>\r\n                            <p className=\"h5 text-center mb-4\">New User</p>\r\n                            <div className=\"grey-text\">\r\n                                <MDBInput\r\n                                    onInput={this.handleInput}\r\n                                    label=\"Name\"\r\n                                    name='name'\r\n                                    icon=\"user\"\r\n                                    group\r\n                                    type=\"text\"\r\n                                    validate\r\n                                    error=\"wrong\"\r\n                                    success=\"right\"\r\n                                    required\r\n                                />\r\n                                <MDBInput\r\n                                    onInput={this.handleInput}\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    icon=\"envelope\"\r\n                                    group\r\n                                    type=\"email\"\r\n                                    validate\r\n                                    error=\"wrong\"\r\n                                    success=\"right\"\r\n                                    required\r\n                                />\r\n                                <MDBInput\r\n                                    onInput={this.handleInput}\r\n                                    label=\"Phone\"\r\n                                    name=\"cell\"\r\n                                    icon=\"phone\"\r\n                                    group\r\n                                    type=\"text\"\r\n                                    validate\r\n                                    error=\"wrong\"\r\n                                    success=\"right\"\r\n                                />\r\n                                <MDBInput\r\n                                    onInput={this.handleInput}\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    ref='username'\r\n                                    icon=\"user\"\r\n                                    group\r\n                                    type=\"text\"\r\n                                    validate\r\n                                    required\r\n                                />\r\n                                <MDBInput\r\n                                    onInput={this.handleInput}\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                    icon=\"lock\"\r\n                                    group\r\n                                    type=\"text\"\r\n                                    validate\r\n                                    required\r\n                                />\r\n                                {/* <MDBIcon icon=\"home\" style={{float:'left'}} /> */}\r\n                                <Select\r\n                                    styles={customStyles}\r\n                                    value={role}\r\n                                    // value={role}\r\n                                    onChange={this.handleSelectChange}\r\n                                    options={roleOptions}\r\n                                    placeholder='Role'\r\n                                    isSearchable\r\n                                    isClearable\r\n                                />\r\n                            </div>\r\n                            <div className=\"text-right\">\r\n                                <MDBBtn size='sm' color=\"teal\" outline type='submit'>Register</MDBBtn>\r\n                            </div>\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NewUser"]},"metadata":{},"sourceType":"module"}