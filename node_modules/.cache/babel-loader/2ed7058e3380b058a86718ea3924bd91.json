{"ast":null,"code":"var _jsxFileName = \"D:\\\\sales&stock\\\\sales\\\\src\\\\components\\\\pages\\\\NewOrder.jsx\";\nimport React from 'react';\nimport ProductsTable from './sections/ProductsTable';\nimport OrderDetails from './sections/OrderDetails';\nimport { MDBRow } from 'mdbreact';\n\nclass NewOrder extends React.Component {\n  constructor() {\n    super();\n\n    this.addProductToTbl = (pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked) => {\n      console.log(pPrice);\n      this.setState({\n        orderTotal: this.state.orderTotal + parseInt(pPrice)\n      });\n\n      if (pChecked) {\n        this.setState({\n          totalValueAdded: this.state.totalValueAdded + parseInt(pPrice)\n        });\n        console.log(this.state.orderTotal);\n      }\n\n      this.refs.productsTable.addProductToTbl(pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked);\n    };\n\n    this.deleteProduct = (price, i, pChecked) => {\n      this.refs.orderDetails.setTotalValue(price);\n\n      if (pChecked === 'Yes') {\n        this.refs.orderDetails.setTotalValueAdded(price);\n      }\n\n      let table = document.getElementById('productsTable');\n      table.deleteRow(i);\n\n      if (table.rows.length === 1) {\n        this.refs.productsTable.setState({\n          submitOrderBtn: false\n        });\n      }\n    };\n\n    this.checkOrderDetailsValidity = () => {\n      var orderDetailsValidity = this.refs.orderDetails.orderDetailsValidity();\n\n      if (!orderDetailsValidity) {\n        return false;\n      } else if (this.customerForm.checkValidity() === false) {\n        this.customerForm.classList.add('was-validated');\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.saveOrderDetailsToDB = (pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked) => {\n      let orderId = this.orderId.value;\n      let orderDetails = {\n        order_id: orderId,\n        pName: pName,\n        pSKU: pSKU,\n        pRate: pRate,\n        pQTY: pQTY,\n        pPrice: pPrice,\n        pRemarks: pRemarks,\n        pChecked: pChecked\n      };\n      var options = {\n        method: 'POST',\n        body: JSON.stringify(orderDetails),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      fetch('/addNewOrderDetails', options).then(res => res.json()).then(json => {// console.log(json)\n      }).catch(error => console.log(error));\n      console.log(pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked);\n      this.refs.orderDetails.setTotalValue(pPrice);\n\n      if (pChecked === 'Yes') {\n        this.refs.orderDetails.setTotalValueAdded(pPrice);\n      }\n    };\n\n    this.saveOrderToDB = () => {\n      this.refs.orderDetails.saveOrderToDB();\n    };\n\n    this.refreshOrdersTable = () => {\n      window.location.reload();\n    };\n\n    this.calculatingOrderTotal = () => {\n      let orderTotal = 0;\n      let x = document.getElementById('productsTable');\n\n      if (x !== null) {\n        if (x.rows.length !== null && x.rows.length !== 1) {\n          for (var index = 1; index < x.rows.length; index++) {\n            let z = parseInt(x.rows[index].cells[5].innerHTML);\n            orderTotal += z;\n          }\n        }\n\n        ;\n      }\n\n      return orderTotal;\n    };\n\n    this.minusFromTotal = pPrice => {\n      this.setState({\n        orderTotal: this.state.orderTotal - parseInt(pPrice)\n      });\n    };\n\n    this.state = {\n      orderTotal: 0,\n      totalValueAdded: 0\n    };\n    this.addProductToTbl = this.addProductToTbl.bind(this);\n    this.deleteProduct = this.deleteProduct.bind(this);\n    this.saveOrderDetailsToDB = this.saveOrderDetailsToDB.bind(this);\n    this.saveOrderToDB = this.saveOrderToDB.bind(this);\n    this.refreshOrdersTable = this.refreshOrdersTable.bind(this);\n  }\n\n  render() {\n    return React.createElement(MDBRow, {\n      style: {\n        marginTop: '78px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(OrderDetails, {\n      ref: \"orderDetails\",\n      orderId: el => this.orderId = el,\n      orderForm: el => this.orderForm = el,\n      customerForm: el => this.customerForm = el,\n      addProductToTbl: this.addProductToTbl,\n      orderTotal: this.state.orderTotal,\n      totalValueAdded: this.state.totalValueAdded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(MDBRow, {\n      center: true,\n      className: \"mt-3 mx-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(ProductsTable, {\n      ref: \"productsTable\",\n      refreshOrdersTable: this.refreshOrdersTable,\n      deleteProduct: this.deleteProduct,\n      saveOrderDetailsToDB: this.saveOrderDetailsToDB,\n      saveOrderToDB: this.saveOrderToDB,\n      checkOrderDetailsValidity: this.checkOrderDetailsValidity,\n      productsTable: el => this.productsTable = el,\n      minusFromTotal: this.minusFromTotal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default NewOrder;","map":{"version":3,"sources":["D:\\sales&stock\\sales\\src\\components\\pages\\NewOrder.jsx"],"names":["React","ProductsTable","OrderDetails","MDBRow","NewOrder","Component","constructor","addProductToTbl","pName","pSKU","pRate","pQTY","pPrice","pRemarks","pChecked","console","log","setState","orderTotal","state","parseInt","totalValueAdded","refs","productsTable","deleteProduct","price","i","orderDetails","setTotalValue","setTotalValueAdded","table","document","getElementById","deleteRow","rows","length","submitOrderBtn","checkOrderDetailsValidity","orderDetailsValidity","customerForm","checkValidity","classList","add","saveOrderDetailsToDB","orderId","value","order_id","options","method","body","JSON","stringify","headers","fetch","then","res","json","catch","error","saveOrderToDB","refreshOrdersTable","window","location","reload","calculatingOrderTotal","x","index","z","cells","innerHTML","minusFromTotal","bind","render","marginTop","el","orderForm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProductsTable from './sections/ProductsTable';\nimport OrderDetails from './sections/OrderDetails';\nimport { MDBRow } from 'mdbreact';\n\n\nclass NewOrder extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      orderTotal: 0,\n      totalValueAdded: 0\n    };\n    this.addProductToTbl = this.addProductToTbl.bind(this);\n    this.deleteProduct = this.deleteProduct.bind(this);\n    this.saveOrderDetailsToDB = this.saveOrderDetailsToDB.bind(this);\n    this.saveOrderToDB = this.saveOrderToDB.bind(this);\n    this.refreshOrdersTable = this.refreshOrdersTable.bind(this);\n  }\n\n  addProductToTbl = (pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked) => {\n    console.log(pPrice);\n\n    this.setState({\n      orderTotal: this.state.orderTotal + parseInt(pPrice)\n    })\n\n    if (pChecked) {\n\n      this.setState({\n        totalValueAdded: this.state.totalValueAdded + parseInt(pPrice)\n      })\n      console.log(this.state.orderTotal);\n    }\n    this.refs.productsTable.addProductToTbl(pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked);\n  }\n\n  deleteProduct = (price, i, pChecked) => {\n\n    this.refs.orderDetails.setTotalValue(price);\n    if (pChecked === 'Yes') {\n      this.refs.orderDetails.setTotalValueAdded(price);\n    }\n    let table = document.getElementById('productsTable');\n    table.deleteRow(i);\n    if (table.rows.length === 1) {\n      this.refs.productsTable.setState({ submitOrderBtn: false })\n    }\n  }\n\n  checkOrderDetailsValidity = () => {\n    var orderDetailsValidity = this.refs.orderDetails.orderDetailsValidity();\n    if (!orderDetailsValidity) {\n      return false;\n    }\n    else if (this.customerForm.checkValidity() === false) {\n      this.customerForm.classList.add('was-validated');\n      return false;\n    }\n    else {\n      return true;\n    }\n\n  }\n\n  saveOrderDetailsToDB = (pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked) => {\n\n    let orderId = this.orderId.value;\n    let orderDetails = { order_id: orderId, pName: pName, pSKU: pSKU, pRate: pRate, pQTY: pQTY, pPrice: pPrice, pRemarks: pRemarks, pChecked: pChecked }\n    var options = {\n      method: 'POST',\n      body: JSON.stringify(orderDetails),\n      headers: { 'Content-Type': 'application/json' }\n    }\n    fetch('/addNewOrderDetails', options)\n      .then((res) => res.json())\n      .then((json) => {\n        // console.log(json)\n      })\n      .catch((error) => console.log(error))\n    console.log(pName, pSKU, pRate, pQTY, pPrice, pRemarks, pChecked)\n    this.refs.orderDetails.setTotalValue(pPrice);\n    if (pChecked === 'Yes') {\n      this.refs.orderDetails.setTotalValueAdded(pPrice);\n    }\n  }\n\n  saveOrderToDB = () => {\n    this.refs.orderDetails.saveOrderToDB();\n  }\n\n  refreshOrdersTable = () => {\n    window.location.reload();\n  }\n  calculatingOrderTotal = () => {\n    let orderTotal = 0;\n    let x = document.getElementById('productsTable')\n    if (x !== null) {\n\n      if (x.rows.length !== null && x.rows.length !== 1) {\n\n        for (var index = 1; index < x.rows.length; index++) {\n          let z = parseInt(x.rows[index].cells[5].innerHTML)\n          orderTotal += z\n        }\n      };\n    }\n    return (orderTotal);\n  }\n  minusFromTotal = (pPrice) => {\n    this.setState({\n      orderTotal: this.state.orderTotal - parseInt(pPrice)\n    })\n  }\n\n  render() {\n\n    return (\n      <MDBRow style={{ marginTop: '78px' }}>\n        <OrderDetails\n          ref='orderDetails'\n          orderId={el => (this.orderId = el)}\n          orderForm={el => (this.orderForm = el)}\n          customerForm={el => (this.customerForm = el)}\n          addProductToTbl={this.addProductToTbl}\n          orderTotal={this.state.orderTotal}\n          totalValueAdded={this.state.totalValueAdded}\n        />\n        <MDBRow center className='mt-3 mx-auto'>\n\n          <ProductsTable\n            ref='productsTable'\n            refreshOrdersTable={this.refreshOrdersTable}\n            deleteProduct={this.deleteProduct}\n            saveOrderDetailsToDB={this.saveOrderDetailsToDB}\n            saveOrderToDB={this.saveOrderToDB}\n            checkOrderDetailsValidity={this.checkOrderDetailsValidity}\n            productsTable={el => (this.productsTable = el)}\n            minusFromTotal={this.minusFromTotal}\n          />\n        </MDBRow>\n      </MDBRow>\n    );\n  }\n}\n\nexport default NewOrder;"]},"metadata":{},"sourceType":"module"}