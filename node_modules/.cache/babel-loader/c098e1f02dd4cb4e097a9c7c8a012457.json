{"ast":null,"code":"import _objectSpread from \"D:\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\sales&stock\\\\sales\\\\src\\\\components\\\\pages\\\\NewUser.jsx\";\nimport React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBIcon, MDBCardBody, MDBCardHeader, MDBCard } from 'mdbreact';\nimport Select from 'react-select';\nimport Notification from './Notification';\n\nclass NewUser extends Component {\n  constructor() {\n    super();\n    this._isMounted = false;\n\n    this.handleSelectChange = selectedOption => {\n      this.setState({\n        role: selectedOption\n      });\n    };\n\n    this.handleInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let form = this.refs.newUserForm;\n\n      if (form.checkValidity() === false) {\n        form.classList.add('was-validated');\n      } else if (this.state.role === '' || this.state.role === null) {\n        this.setState({\n          role: null\n        });\n        return;\n      } else {\n        let name = this.state.name;\n        let email = this.state.email;\n        let cell = this.state.cell;\n        let username = this.state.username;\n        let password = this.state.password;\n        let role = this.state.role.value;\n        console.log(name, email, cell, username, password, role);\n        let user = {\n          name: name,\n          email: email,\n          cell: cell,\n          username: username,\n          password: password,\n          role: role\n        };\n        var options = {\n          method: 'POST',\n          body: JSON.stringify(user),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        fetch('/addNewUser', options).then(res => res.json()).then(json => {\n          console.log(json);\n\n          if (this._isMounted === true) {\n            this.setState({\n              message: json.message,\n              notificationShow: true\n            });\n          }\n\n          if (json.success === true) {\n            this.setState({\n              role: '',\n              name: '',\n              email: '',\n              cell: '',\n              username: '',\n              password: ''\n            });\n          } else {\n            this.username.focus();\n          }\n\n          if (this._isMounted === true) {\n            setTimeout(() => this.setState({\n              notificationShow: false\n            }), 1502);\n          }\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this._isMounted = true;\n    fetch('/getAllRoles').then(res => res.json()).then(json => {\n      // console.log(json)\n      if (this._isMounted) {\n        this.setState({\n          roles: json.data,\n          showOptions: true\n        });\n      }\n    }).catch(error => console.log(error));\n    this.state = {\n      role: '',\n      name: '',\n      email: '',\n      cell: '',\n      username: '',\n      password: '',\n      roles: '',\n      showOptions: false,\n      message: '',\n      notificationShow: false\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const _this$state = this.state,\n          role = _this$state.role,\n          roles = _this$state.roles,\n          showOptions = _this$state.showOptions;\n    const customStyles = {\n      control: (base, state) => _objectSpread({}, base, {\n        borderColor: state.isFocused ? '#ddd' : role !== null ? '#ddd' : 'red',\n        width: '191px' // float: 'right'\n\n      })\n    };\n    var roleOptions;\n\n    if (showOptions) {\n      roleOptions = roles.map(role => ({\n        key: role.id,\n        label: role.name,\n        value: role.id\n      }));\n    }\n\n    return React.createElement(MDBContainer, {\n      className: \"\",\n      style: {\n        marginTop: '80px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      center: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(MDBCard, {\n      className: \" p-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(MDBCardHeader, {\n      tag: \"h4\",\n      style: {\n        color: 'teal'\n      },\n      className: \"text-center font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"New User\"), React.createElement(MDBCardBody, {\n      className: \"p-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      ref: \"newUserForm\",\n      onSubmit: this.handleSubmit,\n      noValidate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grey-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      value: this.state.name,\n      label: \"Name\",\n      name: \"name\",\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Email\",\n      name: \"email\",\n      icon: \"envelope\",\n      group: true,\n      type: \"email\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Phone\",\n      name: \"cell\",\n      icon: \"phone\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Username\",\n      name: \"username\",\n      inputRef: el => {\n        this.username = el;\n      },\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      label: \"Password\",\n      name: \"password\",\n      icon: \"lock\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), showOptions ? React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Select, {\n      styles: customStyles,\n      value: role // value={role}\n      ,\n      onChange: this.handleSelectChange,\n      options: roleOptions,\n      placeholder: \"Role\",\n      isSearchable: true,\n      isClearable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })) : null), React.createElement(\"div\", {\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      size: \"sm\",\n      color: \"teal\",\n      outline: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Register\"))))), this.state.notificationShow ? React.createElement(Notification, {\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }) : null)));\n  }\n\n}\n\nexport default NewUser;","map":{"version":3,"sources":["D:\\sales&stock\\sales\\src\\components\\pages\\NewUser.jsx"],"names":["React","Component","MDBContainer","MDBRow","MDBCol","MDBBtn","MDBInput","MDBIcon","MDBCardBody","MDBCardHeader","MDBCard","Select","Notification","NewUser","constructor","_isMounted","handleSelectChange","selectedOption","setState","role","handleInput","e","target","name","value","handleSubmit","preventDefault","form","refs","newUserForm","checkValidity","classList","add","state","email","cell","username","password","console","log","user","options","method","body","JSON","stringify","headers","fetch","then","res","json","message","notificationShow","success","focus","setTimeout","catch","error","roles","data","showOptions","componentWillUnmount","render","customStyles","control","base","borderColor","isFocused","width","roleOptions","map","key","id","label","marginTop","color","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBIcon, MDBCardBody, MDBCardHeader, MDBCard } from 'mdbreact';\r\nimport Select from 'react-select';\r\nimport Notification from './Notification';\r\n\r\n\r\n\r\n\r\nclass NewUser extends Component {\r\n    _isMounted = false\r\n    constructor() {\r\n        super();\r\n        this._isMounted = true\r\n        fetch('/getAllRoles')\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                // console.log(json)\r\n                if (this._isMounted) {\r\n                    this.setState({ roles: json.data, showOptions: true })\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n\r\n\r\n\r\n        this.state = {\r\n            role: '',\r\n            name: '',\r\n            email: '',\r\n            cell: '',\r\n            username: '',\r\n            password: '',\r\n            roles: '',\r\n            showOptions: false,\r\n            message: '',\r\n            notificationShow: false\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    handleSelectChange = selectedOption => {\r\n        this.setState({\r\n            role: selectedOption\r\n        })\r\n    }\r\n\r\n    handleInput = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let form = this.refs.newUserForm\r\n        if (form.checkValidity() === false) {\r\n            form.classList.add('was-validated');\r\n        }\r\n        else if (this.state.role === '' || this.state.role === null) {\r\n            this.setState({ role: null })\r\n            return\r\n        }\r\n        else {\r\n            let name = this.state.name\r\n            let email = this.state.email\r\n            let cell = this.state.cell\r\n            let username = this.state.username\r\n            let password = this.state.password\r\n            let role = this.state.role.value\r\n\r\n            console.log(name, email, cell, username, password, role);\r\n            let user = { name: name, email: email, cell: cell, username: username, password: password, role: role }\r\n\r\n            var options = {\r\n                method: 'POST',\r\n                body: JSON.stringify(user),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n            fetch('/addNewUser', options)\r\n                .then((res) => res.json())\r\n                .then((json) => {\r\n                    console.log(json)\r\n                    if (this._isMounted === true) {\r\n                        this.setState({ message: json.message, notificationShow: true })\r\n                    }\r\n                    if (json.success === true) {\r\n\r\n                        this.setState({\r\n                            role: '',\r\n                            name: '',\r\n                            email: '',\r\n                            cell: '',\r\n                            username: '',\r\n                            password: ''\r\n                        })\r\n                    }\r\n                    else {\r\n                        this.username.focus();\r\n                    }\r\n                    if (this._isMounted === true) {\r\n                        setTimeout(() => this.setState({ notificationShow: false }), 1502);\r\n\r\n                    }\r\n                })\r\n                .catch((error) => console.log(error))\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { role, roles, showOptions } = this.state\r\n        const customStyles = {\r\n            control: (base, state) => ({\r\n                ...base,\r\n                borderColor: state.isFocused ?\r\n                    '#ddd' : role !== null ?\r\n                        '#ddd' : 'red',\r\n                width: '191px',\r\n                // float: 'right'\r\n            })\r\n        }\r\n        var roleOptions;\r\n        if (showOptions) {\r\n\r\n            roleOptions = roles.map(role => ({ key: role.id, label: role.name, value: role.id }));\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <MDBContainer className='' style={{ marginTop: '80px' }}>\r\n                <MDBRow center>\r\n                    <MDBCol md=\"6\">\r\n                        <MDBCard className=' p-5'>\r\n\r\n                            <MDBCardHeader tag=\"h4\" style={{ color: 'teal' }} className=\"text-center font-weight-bold\">\r\n                                New User\r\n                            </MDBCardHeader>\r\n                            <MDBCardBody className='p-2'>\r\n\r\n                                <form ref='newUserForm' onSubmit={this.handleSubmit} noValidate>\r\n                                    <div className=\"grey-text\">\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.name}\r\n                                            label=\"Name\"\r\n                                            name='name'\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            icon=\"envelope\"\r\n                                            group\r\n                                            type=\"email\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            label=\"Phone\"\r\n                                            name=\"cell\"\r\n                                            icon=\"phone\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            label=\"Username\"\r\n                                            name=\"username\"\r\n                                            inputRef={el => { this.username = el }}\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            label=\"Password\"\r\n                                            name=\"password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            required>\r\n                                            {/* <MDBIcon icon=\"home\" style={{ float: 'left' }} /> */}\r\n                                        </MDBInput>\r\n                                        {showOptions ?\r\n                                            <div className=''>\r\n                                                <Select\r\n                                                    styles={customStyles}\r\n                                                    value={role}\r\n                                                    // value={role}\r\n                                                    onChange={this.handleSelectChange}\r\n                                                    options={roleOptions}\r\n                                                    placeholder='Role'\r\n                                                    isSearchable\r\n                                                    isClearable\r\n                                                />\r\n                                            </div> : null\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <MDBBtn size='sm' color=\"teal\" outline type='submit'>Register</MDBBtn>\r\n                                    </div>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                        {\r\n                            this.state.notificationShow ?\r\n                                <Notification\r\n                                    message={this.state.message}\r\n                                /> : null\r\n                        }\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NewUser"]},"metadata":{},"sourceType":"module"}