{"ast":null,"code":"import _objectSpread from \"D:\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\sales&stock\\\\sales\\\\src\\\\components\\\\pages\\\\sections\\\\EditUserModal.jsx\";\nimport React, { Component } from 'react';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBCard, MDBCardBody, MDBModalHeader, MDBModalFooter, MDBRow, MDBCol, MDBInput } from 'mdbreact';\nimport Select from 'react-select';\n\nclass EditOrderModal extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.fetchData = id => {\n      this._isMounted = true;\n      fetch('/getSpecificUser/' + id).then(res => res.json()).then(json => {\n        console.log(json);\n        var user = json.data;\n\n        if (this._isMounted === true) {\n          this.setState({\n            user: user,\n            userId: user.id,\n            role: user.role_id,\n            name: user.name,\n            email: user.email,\n            cell: user.cell,\n            username: user.username,\n            password: user.password\n          });\n        }\n      }).catch(error => console.log(error));\n      fetch('/getAllRoles').then(res => res.json()).then(json => {\n        console.log(json);\n\n        if (this._isMounted) {\n          this.setState({\n            roles: json.data\n          });\n        }\n      }).catch(error => console.log(error));\n    };\n\n    this.componentWillUnmount = () => {\n      this._isMounted = false;\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modalShow: !this.state.modalShow\n      });\n    };\n\n    this.handleInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSelectChange = selectedOption => {\n      if (selectedOption === null) {\n        this.setState({\n          orderSource: selectedOption,\n          isValidSource: false\n        });\n      } else {\n        this.setState({\n          orderSource: selectedOption,\n          isValidSource: true\n        });\n      }\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let form = this.refs.updateUserForm;\n\n      if (form.checkValidity() === false) {\n        form.classList.add('was-validated');\n      } else if (this.state.role === '' || this.state.role === null) {\n        this.setState({\n          role: null\n        });\n        return;\n      } else {\n        let name = this.state.name;\n        let email = this.state.email;\n        let cell = this.state.cell;\n        let username = this.state.username;\n        let password = this.state.password;\n        let role = this.state.role.value;\n        console.log(name, email, cell, username, password, role);\n        let user = {\n          name: name,\n          email: email,\n          cell: cell,\n          username: username,\n          password: password,\n          role: role\n        };\n        var options = {\n          method: 'POST',\n          body: JSON.stringify(user),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        fetch('/addNewUser', options).then(res => res.json()).then(json => {\n          console.log(json);\n\n          if (this._isMounted = true) {\n            this.setState({\n              message: json.message,\n              notificationShow: true\n            });\n          }\n\n          if (json.success) {\n            this.setState({\n              role: '',\n              name: '',\n              email: '',\n              cell: '',\n              username: '',\n              password: ''\n            });\n          } else {\n            this.username.focus();\n          }\n\n          if (this._isMounted) {\n            setTimeout(() => this.setState({\n              notificationShow: false\n            }), 1502);\n          }\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this.state = {\n      modalShow: false,\n      userId: '',\n      role: '',\n      name: '',\n      email: '',\n      cell: '',\n      username: '',\n      password: '',\n      roles: '' // this.deleteProduct = this.deleteProduct.bind(this);\n\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          role = _this$state.role,\n          roles = _this$state.roles;\n    const customStyles = {\n      control: (base, state) => _objectSpread({}, base, {\n        borderColor: state.isFocused ? '#ddd' : role !== null ? '#ddd' : 'red',\n        width: '191px'\n      }) // var roleOptions;\n      // if (showOptions) {\n      //     roleOptions = roles.map(role => ({ key: role.id, label: role.name, value: role.id }));\n      // }\n\n    };\n    return React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(MDBModal, {\n      isOpen: this.state.modalShow,\n      toggle: this.toggle,\n      size: \"lg\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(MDBModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Edit User Details\"), React.createElement(MDBModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(MDBCard, {\n      className: \" p-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(MDBCardBody, {\n      className: \"p-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      ref: \"updateUserForm\",\n      onSubmit: this.handleSubmit,\n      noValidate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grey-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      value: this.state.name,\n      label: \"Name\",\n      name: \"name\",\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      value: this.state.email,\n      label: \"Email\",\n      name: \"email\",\n      icon: \"envelope\",\n      group: true,\n      type: \"email\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      value: this.state.cell,\n      label: \"Phone\",\n      name: \"cell\",\n      icon: \"phone\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      value: this.state.username,\n      label: \"Username\",\n      name: \"username\",\n      inputRef: el => {\n        this.username = el;\n      },\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(MDBInput, {\n      onInput: this.handleInput,\n      value: this.state.password,\n      label: \"Password\",\n      name: \"password\",\n      icon: \"lock\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Select, {\n      styles: customStyles,\n      value: role // value={role}\n      ,\n      onChange: this.handleSelectChange,\n      options: roles,\n      placeholder: \"Role\",\n      isSearchable: true,\n      isClearable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(MDBBtn, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Close\"), React.createElement(MDBBtn, {\n      onClick: this.handleSubmit,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Save updates\"))))), React.createElement(MDBModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EditOrderModal;","map":{"version":3,"sources":["D:\\sales&stock\\sales\\src\\components\\pages\\sections\\EditUserModal.jsx"],"names":["React","Component","MDBContainer","MDBBtn","MDBModal","MDBModalBody","MDBCard","MDBCardBody","MDBModalHeader","MDBModalFooter","MDBRow","MDBCol","MDBInput","Select","EditOrderModal","constructor","props","_isMounted","fetchData","id","fetch","then","res","json","console","log","user","data","setState","userId","role","role_id","name","email","cell","username","password","catch","error","roles","componentWillUnmount","toggle","modalShow","state","handleInput","e","target","value","handleSelectChange","selectedOption","orderSource","isValidSource","handleSubmit","preventDefault","form","refs","updateUserForm","checkValidity","classList","add","options","method","body","JSON","stringify","headers","message","notificationShow","success","focus","setTimeout","render","customStyles","control","base","borderColor","isFocused","width","el"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,YAAzC,EAAuDC,OAAvD,EAAgEC,WAAhE,EAA6EC,cAA7E,EAA6FC,cAA7F,EAA6GC,MAA7G,EAAqHC,MAArH,EAA6HC,QAA7H,QAA6I,UAA7I;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAIA,MAAMC,cAAN,SAA6Bb,SAA7B,CAAuC;AAEnCc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SADnBC,UACmB,GADN,KACM;;AAAA,SAenBC,SAfmB,GAeNC,EAAD,IAAQ;AAChB,WAAKF,UAAL,GAAkB,IAAlB;AACAG,MAAAA,KAAK,CAAC,sBAAsBD,EAAvB,CAAL,CACKE,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,YAAIG,IAAI,GAAGH,IAAI,CAACI,IAAhB;;AACA,YAAI,KAAKV,UAAL,KAAoB,IAAxB,EAA8B;AAC1B,eAAKW,QAAL,CAAc;AACVF,YAAAA,IAAI,EAAEA,IADI;AAEVG,YAAAA,MAAM,EAAEH,IAAI,CAACP,EAFH;AAGVW,YAAAA,IAAI,EAAEJ,IAAI,CAACK,OAHD;AAIVC,YAAAA,IAAI,EAAEN,IAAI,CAACM,IAJD;AAKVC,YAAAA,KAAK,EAAEP,IAAI,CAACO,KALF;AAMVC,YAAAA,IAAI,EAAER,IAAI,CAACQ,IAND;AAOVC,YAAAA,QAAQ,EAAET,IAAI,CAACS,QAPL;AAQVC,YAAAA,QAAQ,EAAEV,IAAI,CAACU;AARL,WAAd;AAUH;AACJ,OAjBL,EAkBKC,KAlBL,CAkBYC,KAAD,IAAWd,OAAO,CAACC,GAAR,CAAYa,KAAZ,CAlBtB;AAmBAlB,MAAAA,KAAK,CAAC,cAAD,CAAL,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,YAAI,KAAKN,UAAT,EAAqB;AACjB,eAAKW,QAAL,CAAc;AAAEW,YAAAA,KAAK,EAAEhB,IAAI,CAACI;AAAd,WAAd;AACH;AACJ,OAPL,EAQKU,KARL,CAQYC,KAAD,IAAWd,OAAO,CAACC,GAAR,CAAYa,KAAZ,CARtB;AAUH,KA9CkB;;AAAA,SAgDnBE,oBAhDmB,GAgDI,MAAM;AACzB,WAAKvB,UAAL,GAAkB,KAAlB;AACH,KAlDkB;;AAAA,SAoDnBwB,MApDmB,GAoDV,MAAM;AACX,WAAKb,QAAL,CAAc;AACVc,QAAAA,SAAS,EAAE,CAAC,KAAKC,KAAL,CAAWD;AADb,OAAd;AAIH,KAzDkB;;AAAA,SA2DnBE,WA3DmB,GA2DLC,CAAC,IAAI;AACf,WAAKjB,QAAL,CAAc;AACV,SAACiB,CAAC,CAACC,MAAF,CAASd,IAAV,GAAiBa,CAAC,CAACC,MAAF,CAASC;AADhB,OAAd;AAGH,KA/DkB;;AAAA,SAiEnBC,kBAjEmB,GAiEEC,cAAc,IAAI;AACnC,UAAIA,cAAc,KAAK,IAAvB,EAA6B;AACzB,aAAKrB,QAAL,CAAc;AACVsB,UAAAA,WAAW,EAAED,cADH;AACmBE,UAAAA,aAAa,EAAE;AADlC,SAAd;AAGH,OAJD,MAKK;AACD,aAAKvB,QAAL,CAAc;AACVsB,UAAAA,WAAW,EAAED,cADH;AACmBE,UAAAA,aAAa,EAAE;AADlC,SAAd;AAGH;AACJ,KA5EkB;;AAAA,SA8EnBC,YA9EmB,GA8EHP,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACQ,cAAF;AACA,UAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,cAArB;;AACA,UAAIF,IAAI,CAACG,aAAL,OAAyB,KAA7B,EAAoC;AAChCH,QAAAA,IAAI,CAACI,SAAL,CAAeC,GAAf,CAAmB,eAAnB;AACH,OAFD,MAGK,IAAI,KAAKhB,KAAL,CAAWb,IAAX,KAAoB,EAApB,IAA0B,KAAKa,KAAL,CAAWb,IAAX,KAAoB,IAAlD,EAAwD;AACzD,aAAKF,QAAL,CAAc;AAAEE,UAAAA,IAAI,EAAE;AAAR,SAAd;AACA;AACH,OAHI,MAIA;AACD,YAAIE,IAAI,GAAG,KAAKW,KAAL,CAAWX,IAAtB;AACA,YAAIC,KAAK,GAAG,KAAKU,KAAL,CAAWV,KAAvB;AACA,YAAIC,IAAI,GAAG,KAAKS,KAAL,CAAWT,IAAtB;AACA,YAAIC,QAAQ,GAAG,KAAKQ,KAAL,CAAWR,QAA1B;AACA,YAAIC,QAAQ,GAAG,KAAKO,KAAL,CAAWP,QAA1B;AACA,YAAIN,IAAI,GAAG,KAAKa,KAAL,CAAWb,IAAX,CAAgBiB,KAA3B;AAEAvB,QAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ,EAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDN,IAAnD;AACA,YAAIJ,IAAI,GAAG;AAAEM,UAAAA,IAAI,EAAEA,IAAR;AAAcC,UAAAA,KAAK,EAAEA,KAArB;AAA4BC,UAAAA,IAAI,EAAEA,IAAlC;AAAwCC,UAAAA,QAAQ,EAAEA,QAAlD;AAA4DC,UAAAA,QAAQ,EAAEA,QAAtE;AAAgFN,UAAAA,IAAI,EAAEA;AAAtF,SAAX;AAEA,YAAI8B,OAAO,GAAG;AACVC,UAAAA,MAAM,EAAE,MADE;AAEVC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAetC,IAAf,CAFI;AAGVuC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AAHC,SAAd;AAKA7C,QAAAA,KAAK,CAAC,aAAD,EAAgBwC,OAAhB,CAAL,CACKvC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,cAAI,KAAKN,UAAL,GAAkB,IAAtB,EAA4B;AACxB,iBAAKW,QAAL,CAAc;AAAEsC,cAAAA,OAAO,EAAE3C,IAAI,CAAC2C,OAAhB;AAAyBC,cAAAA,gBAAgB,EAAE;AAA3C,aAAd;AACH;;AACD,cAAI5C,IAAI,CAAC6C,OAAT,EAAkB;AACd,iBAAKxC,QAAL,CAAc;AACVE,cAAAA,IAAI,EAAE,EADI;AAEVE,cAAAA,IAAI,EAAE,EAFI;AAGVC,cAAAA,KAAK,EAAE,EAHG;AAIVC,cAAAA,IAAI,EAAE,EAJI;AAKVC,cAAAA,QAAQ,EAAE,EALA;AAMVC,cAAAA,QAAQ,EAAE;AANA,aAAd;AAQH,WATD,MAUK;AACD,iBAAKD,QAAL,CAAckC,KAAd;AACH;;AACD,cAAI,KAAKpD,UAAT,EAAqB;AACjBqD,YAAAA,UAAU,CAAC,MAAM,KAAK1C,QAAL,CAAc;AAAEuC,cAAAA,gBAAgB,EAAE;AAApB,aAAd,CAAP,EAAmD,IAAnD,CAAV;AAEH;AACJ,SAxBL,EAyBK9B,KAzBL,CAyBYC,KAAD,IAAWd,OAAO,CAACC,GAAR,CAAYa,KAAZ,CAzBtB;AA0BH;AACJ,KAnIkB;;AAEf,SAAKK,KAAL,GAAa;AACTD,MAAAA,SAAS,EAAE,KADF;AAETb,MAAAA,MAAM,EAAE,EAFC;AAGTC,MAAAA,IAAI,EAAE,EAHG;AAITE,MAAAA,IAAI,EAAE,EAJG;AAKTC,MAAAA,KAAK,EAAE,EALE;AAMTC,MAAAA,IAAI,EAAE,EANG;AAOTC,MAAAA,QAAQ,EAAE,EAPD;AAQTC,MAAAA,QAAQ,EAAE,EARD;AASTG,MAAAA,KAAK,EAAE,EATE,CAWb;;AAXa,KAAb;AAYH;;AA2HDgC,EAAAA,MAAM,GAAG;AAAA,wBACmB,KAAK5B,KADxB;AAAA,UACGb,IADH,eACGA,IADH;AAAA,UACSS,KADT,eACSA,KADT;AAEL,UAAMiC,YAAY,GAAG;AACjBC,MAAAA,OAAO,EAAE,CAACC,IAAD,EAAO/B,KAAP,uBACF+B,IADE;AAELC,QAAAA,WAAW,EAAEhC,KAAK,CAACiC,SAAN,GACT,MADS,GACA9C,IAAI,KAAK,IAAT,GACL,MADK,GACI,KAJZ;AAKL+C,QAAAA,KAAK,EAAE;AALF,QADQ,CASrB;AACA;AAEA;AACA;;AAbqB,KAArB;AAiBA,WACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAE,KAAKlC,KAAL,CAAWD,SAA7B;AAAwC,MAAA,MAAM,EAAE,KAAKD,MAArD;AAA6D,MAAA,IAAI,EAAC,IAAlE;AAAuE,MAAA,QAAQ,MAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAE,KAAKA,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAM,MAAA,GAAG,EAAC,gBAAV;AAA2B,MAAA,QAAQ,EAAE,KAAKW,YAA1C;AAAwD,MAAA,UAAU,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAE,KAAKR,WADlB;AAEI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWX,IAFtB;AAGI,MAAA,KAAK,EAAC,MAHV;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,IAAI,EAAC,MALT;AAMI,MAAA,KAAK,MANT;AAOI,MAAA,IAAI,EAAC,MAPT;AAQI,MAAA,QAAQ,MARZ;AASI,MAAA,KAAK,EAAC,OATV;AAUI,MAAA,OAAO,EAAC,OAVZ;AAWI,MAAA,QAAQ,MAXZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAcI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAE,KAAKY,WADlB;AAEI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWV,KAFtB;AAGI,MAAA,KAAK,EAAC,OAHV;AAII,MAAA,IAAI,EAAC,OAJT;AAKI,MAAA,IAAI,EAAC,UALT;AAMI,MAAA,KAAK,MANT;AAOI,MAAA,IAAI,EAAC,OAPT;AAQI,MAAA,QAAQ,MARZ;AASI,MAAA,KAAK,EAAC,OATV;AAUI,MAAA,OAAO,EAAC,OAVZ;AAWI,MAAA,QAAQ,MAXZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,EA2BI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAE,KAAKW,WADlB;AAEI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWT,IAFtB;AAGI,MAAA,KAAK,EAAC,OAHV;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,IAAI,EAAC,OALT;AAMI,MAAA,KAAK,MANT;AAOI,MAAA,IAAI,EAAC,MAPT;AAQI,MAAA,QAAQ,MARZ;AASI,MAAA,KAAK,EAAC,OATV;AAUI,MAAA,OAAO,EAAC,OAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BJ,EAuCI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAE,KAAKU,WADlB;AAEI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWR,QAFtB;AAGI,MAAA,KAAK,EAAC,UAHV;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,QAAQ,EAAE2C,EAAE,IAAI;AAAE,aAAK3C,QAAL,GAAgB2C,EAAhB;AAAoB,OAL1C;AAMI,MAAA,IAAI,EAAC,MANT;AAOI,MAAA,KAAK,MAPT;AAQI,MAAA,IAAI,EAAC,MART;AASI,MAAA,QAAQ,MATZ;AAUI,MAAA,QAAQ,MAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCJ,EAmDI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAE,KAAKlC,WADlB;AAEI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWP,QAFtB;AAGI,MAAA,KAAK,EAAC,UAHV;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,IAAI,EAAC,MALT;AAMI,MAAA,KAAK,MANT;AAOI,MAAA,IAAI,EAAC,MAPT;AAQI,MAAA,QAAQ,MARZ;AASI,MAAA,QAAQ,MATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDJ,EAgEI;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAEoC,YADZ;AAEI,MAAA,KAAK,EAAE1C,IAFX,CAGI;AAHJ;AAII,MAAA,QAAQ,EAAE,KAAKkB,kBAJnB;AAKI,MAAA,OAAO,EAAET,KALb;AAMI,MAAA,WAAW,EAAC,MANhB;AAOI,MAAA,YAAY,MAPhB;AAQI,MAAA,WAAW,MARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAhEJ,CADJ,EAiFI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjFJ,EAoFI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,WAAd;AAA0B,MAAA,OAAO,EAAE,KAAKE,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eApFJ,EAqFI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKW,YAAtB;AAAoC,MAAA,KAAK,EAAC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBArFJ,CAFJ,CADJ,CAFJ,CAFJ,EAyGI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzGJ,CADJ,CADJ;AAgHH;;AA9QkC;;AAiRvC,eAAetC,cAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBCard, MDBCardBody, MDBModalHeader, MDBModalFooter, MDBRow, MDBCol, MDBInput } from 'mdbreact';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nclass EditOrderModal extends Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalShow: false,\r\n            userId: '',\r\n            role: '',\r\n            name: '',\r\n            email: '',\r\n            cell: '',\r\n            username: '',\r\n            password: '',\r\n            roles: '',\r\n        }\r\n        // this.deleteProduct = this.deleteProduct.bind(this);\r\n    }\r\n    fetchData = (id) => {\r\n        this._isMounted = true\r\n        fetch('/getSpecificUser/' + id)\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                console.log(json)\r\n                var user = json.data\r\n                if (this._isMounted === true) {\r\n                    this.setState({\r\n                        user: user,\r\n                        userId: user.id,\r\n                        role: user.role_id,\r\n                        name: user.name,\r\n                        email: user.email,\r\n                        cell: user.cell,\r\n                        username: user.username,\r\n                        password: user.password,\r\n                    })\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n        fetch('/getAllRoles')\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                console.log(json)\r\n                if (this._isMounted) {\r\n                    this.setState({ roles: json.data })\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        this._isMounted = false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modalShow: !this.state.modalShow,\r\n\r\n        });\r\n    }\r\n\r\n    handleInput = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSelectChange = selectedOption => {\r\n        if (selectedOption === null) {\r\n            this.setState({\r\n                orderSource: selectedOption, isValidSource: false\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                orderSource: selectedOption, isValidSource: true\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let form = this.refs.updateUserForm\r\n        if (form.checkValidity() === false) {\r\n            form.classList.add('was-validated');\r\n        }\r\n        else if (this.state.role === '' || this.state.role === null) {\r\n            this.setState({ role: null })\r\n            return\r\n        }\r\n        else {\r\n            let name = this.state.name\r\n            let email = this.state.email\r\n            let cell = this.state.cell\r\n            let username = this.state.username\r\n            let password = this.state.password\r\n            let role = this.state.role.value\r\n\r\n            console.log(name, email, cell, username, password, role);\r\n            let user = { name: name, email: email, cell: cell, username: username, password: password, role: role }\r\n\r\n            var options = {\r\n                method: 'POST',\r\n                body: JSON.stringify(user),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n            fetch('/addNewUser', options)\r\n                .then((res) => res.json())\r\n                .then((json) => {\r\n                    console.log(json)\r\n                    if (this._isMounted = true) {\r\n                        this.setState({ message: json.message, notificationShow: true })\r\n                    }\r\n                    if (json.success) {\r\n                        this.setState({\r\n                            role: '',\r\n                            name: '',\r\n                            email: '',\r\n                            cell: '',\r\n                            username: '',\r\n                            password: ''\r\n                        })\r\n                    }\r\n                    else {\r\n                        this.username.focus();\r\n                    }\r\n                    if (this._isMounted) {\r\n                        setTimeout(() => this.setState({ notificationShow: false }), 1502);\r\n\r\n                    }\r\n                })\r\n                .catch((error) => console.log(error))\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { role, roles } = this.state\r\n        const customStyles = {\r\n            control: (base, state) => ({\r\n                ...base,\r\n                borderColor: state.isFocused ?\r\n                    '#ddd' : role !== null ?\r\n                        '#ddd' : 'red',\r\n                width: '191px',\r\n            })\r\n        }\r\n        // var roleOptions;\r\n        // if (showOptions) {\r\n\r\n        //     roleOptions = roles.map(role => ({ key: role.id, label: role.name, value: role.id }));\r\n        // }\r\n\r\n\r\n\r\n        return (\r\n            <MDBContainer>\r\n                <MDBModal isOpen={this.state.modalShow} toggle={this.toggle} size='lg' centered>\r\n                    <MDBModalHeader toggle={this.toggle}>Edit User Details</MDBModalHeader>\r\n                    <MDBModalBody>\r\n\r\n                        <MDBCard className=' p-5'>\r\n                            <MDBCardBody className='p-2'>\r\n\r\n                                <form ref='updateUserForm' onSubmit={this.handleSubmit} noValidate>\r\n                                    <div className=\"grey-text\">\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.name}\r\n                                            label=\"Name\"\r\n                                            name='name'\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.email}\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            icon=\"envelope\"\r\n                                            group\r\n                                            type=\"email\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.cell}\r\n                                            label=\"Phone\"\r\n                                            name=\"cell\"\r\n                                            icon=\"phone\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.username}\r\n                                            label=\"Username\"\r\n                                            name=\"username\"\r\n                                            inputRef={el => { this.username = el }}\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.password}\r\n                                            label=\"Password\"\r\n                                            name=\"password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            required>\r\n                                            {/* <MDBIcon icon=\"home\" style={{ float: 'left' }} /> */}\r\n                                        </MDBInput>\r\n                                        {/* {showOptions ? */}\r\n                                        <div className=''>\r\n                                            <Select\r\n                                                styles={customStyles}\r\n                                                value={role}\r\n                                                // value={role}\r\n                                                onChange={this.handleSelectChange}\r\n                                                options={roles}\r\n                                                placeholder='Role'\r\n                                                isSearchable\r\n                                                isClearable\r\n                                            />\r\n                                        </div>\r\n                                        {/* : null */}\r\n                                        {/* } */}\r\n                                    </div>\r\n                                    {/* <MDBBtn size='sm' color=\"teal\" outline type='submit'>Save Updates</MDBBtn> */}\r\n                                    <div className='text-right'>\r\n\r\n                                    </div>\r\n                                    <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\r\n                                    <MDBBtn onClick={this.handleSubmit} color=\"primary\">Save updates</MDBBtn>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                        {/* {\r\n                                        this.state.notificationShow ?\r\n                                            <Notification\r\n                                                message={this.state.message}\r\n                                            /> : null\r\n                                    } */}\r\n\r\n\r\n                    </MDBModalBody>\r\n                    <MDBModalFooter>\r\n                    </MDBModalFooter>\r\n                </MDBModal>\r\n            </MDBContainer >\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditOrderModal;"]},"metadata":{},"sourceType":"module"}