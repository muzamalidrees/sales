{"ast":null,"code":"import _objectSpread from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"G:\\\\mzamal\\\\sales&stock\\\\sales\\\\src\\\\components\\\\users\\\\pages\\\\EditUserModal.jsx\";\nimport React, { Component } from 'react';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBCard, MDBCardBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\nimport Select from 'react-select';\nimport Notification from '../../misc/sections/Notification';\n\nvar EditUserModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditUserModal, _Component);\n\n  function EditUserModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditUserModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditUserModal).call(this, props));\n    _this._isMounted = false;\n\n    _this.fetchData = function (id) {\n      _this._isMounted = true;\n      fetch('/getSpecificUser/' + id).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        // console.log(json)\n        var user = json.data;\n\n        if (_this._isMounted === true) {\n          _this.setState({\n            user: user,\n            userId: user.id,\n            role_id: user.role_id,\n            name: user.name,\n            email: user.email,\n            cell: user.cell,\n            username: user.username,\n            password: user.password\n          });\n        }\n      })[\"catch\"](function (error) {\n        return console.log(error);\n      });\n      fetch('/getAllRoles').then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        // console.log(json)\n        if (_this._isMounted) {\n          _this.setState({\n            roles: json.data\n          });\n        }\n\n        _this.setRoleOptions(json.data);\n      })[\"catch\"](function (error) {\n        return console.log(error);\n      });\n    };\n\n    _this.componentWillUnmount = function () {\n      _this._isMounted = false;\n    };\n\n    _this.toggle = function () {\n      _this.setState({\n        modalShow: !_this.state.modalShow\n      });\n    };\n\n    _this.setRoleOptions = function (roles) {\n      var roleOptions = roles.map(function (role) {\n        return {\n          key: role.id,\n          label: role.name,\n          value: role.id\n        };\n      });\n      var currentRole;\n      roles.forEach(function (role) {\n        if (role.id.toString() === _this.state.role_id) {\n          currentRole = {\n            label: role.name,\n            value: role.id\n          };\n        }\n      });\n\n      _this.setState({\n        roleOptions: roleOptions,\n        role: currentRole\n      });\n    };\n\n    _this.handleInput = function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.handleSelectChange = function (selectedOption) {\n      _this.setState({\n        role: selectedOption\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var form = _this.refs.updateUserForm;\n\n      if (form.checkValidity() === false) {\n        form.classList.add('was-validated');\n      } else if (_this.state.role === '' || _this.state.role === null) {\n        _this.setState({\n          role: null\n        });\n\n        return;\n      } else {\n        var name = _this.state.name;\n        var email = _this.state.email;\n        var cell = _this.state.cell;\n        var username = _this.state.username;\n        var password = _this.state.password;\n        var role = _this.state.role.value;\n        var userId = _this.state.userId; // console.log(userId, name, email, cell, username, password, role);\n\n        var user = {\n          id: userId,\n          name: name,\n          email: email,\n          cell: cell,\n          username: username,\n          password: password,\n          role: role\n        };\n        var options = {\n          method: 'PUT',\n          body: JSON.stringify(user),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        fetch('/updateUser', options).then(function (res) {\n          return res.json();\n        }).then(function (json) {\n          console.log(json);\n\n          if (_this._isMounted === true) {\n            _this.setState({\n              message: json.message,\n              notificationShow: true\n            });\n\n            setTimeout(function () {\n              return _this.setState({\n                notificationShow: false\n              });\n            }, 1502);\n          }\n        })[\"catch\"](function (error) {\n          return console.log(error);\n        }); //closing edit modal\n\n        _this.toggle(); // refreshing all records table\n\n\n        window.location.reload();\n      }\n    };\n\n    _this.state = {\n      modalShow: false,\n      userId: '',\n      role_id: '',\n      role: '',\n      name: '',\n      email: '',\n      cell: '',\n      username: '',\n      password: '',\n      roles: '',\n      roleOptions: [],\n      message: '',\n      notificationShow: false // this.deleteProduct = this.deleteProduct.bind(this);\n\n    };\n    return _this;\n  }\n\n  _createClass(EditUserModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          role = _this$state.role,\n          roleOptions = _this$state.roleOptions;\n      var customStyles = {\n        control: function control(base, state) {\n          return _objectSpread({}, base, {\n            borderColor: state.isFocused ? '#ddd' : role !== null ? '#ddd' : 'red',\n            width: '191px'\n          });\n        }\n      };\n      return React.createElement(MDBContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(MDBModal, {\n        isOpen: this.state.modalShow,\n        toggle: this.toggle,\n        size: \"lg\",\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(MDBModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Edit User Details\"), React.createElement(MDBModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(MDBCard, {\n        className: \" p-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(MDBCardBody, {\n        className: \"p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        ref: \"updateUserForm\",\n        onSubmit: this.handleSubmit,\n        noValidate: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grey-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(MDBInput, {\n        onInput: this.handleInput,\n        value: this.state.name,\n        label: \"Name\",\n        name: \"name\",\n        icon: \"user\",\n        group: true,\n        type: \"text\",\n        validate: true,\n        error: \"wrong\",\n        success: \"right\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        onInput: this.handleInput,\n        value: this.state.email,\n        label: \"Email\",\n        name: \"email\",\n        icon: \"envelope\",\n        group: true,\n        type: \"email\",\n        validate: true,\n        error: \"wrong\",\n        success: \"right\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        onInput: this.handleInput,\n        value: this.state.cell,\n        label: \"Phone\",\n        name: \"cell\",\n        icon: \"phone\",\n        group: true,\n        type: \"text\",\n        validate: true,\n        error: \"wrong\",\n        success: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        onInput: this.handleInput,\n        value: this.state.username,\n        label: \"Username\",\n        name: \"username\",\n        inputRef: function inputRef(el) {\n          _this2.username = el;\n        },\n        icon: \"user\",\n        group: true,\n        type: \"text\",\n        validate: true,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        onInput: this.handleInput,\n        value: this.state.password,\n        label: \"Password\",\n        name: \"password\",\n        icon: \"lock\",\n        group: true,\n        type: \"text\",\n        validate: true,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Select, {\n        styles: customStyles // defaultValue={currentRole}\n        ,\n        value: this.state.role,\n        onChange: this.handleSelectChange,\n        options: roleOptions,\n        placeholder: \"Role\",\n        isSearchable: true,\n        isClearable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(MDBBtn, {\n        size: \"sm\",\n        className: \"px-2 font-weight-bold\",\n        color: \"secondary\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Close\"), React.createElement(MDBBtn, {\n        size: \"sm\",\n        className: \"px-2 font-weight-bold\",\n        onClick: this.handleSubmit,\n        outline: true,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"Save updates\")))), this.state.notificationShow ? React.createElement(Notification, {\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }) : null)), React.createElement(MDBModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return EditUserModal;\n}(Component);\n\nexport default EditUserModal;","map":{"version":3,"sources":["G:\\mzamal\\sales&stock\\sales\\src\\components\\users\\pages\\EditUserModal.jsx"],"names":["React","Component","MDBContainer","MDBBtn","MDBModal","MDBModalBody","MDBCard","MDBCardBody","MDBModalHeader","MDBModalFooter","MDBInput","Select","Notification","EditUserModal","props","_isMounted","fetchData","id","fetch","then","res","json","user","data","setState","userId","role_id","name","email","cell","username","password","error","console","log","roles","setRoleOptions","componentWillUnmount","toggle","modalShow","state","roleOptions","map","role","key","label","value","currentRole","forEach","toString","handleInput","e","target","handleSelectChange","selectedOption","handleSubmit","preventDefault","form","refs","updateUserForm","checkValidity","classList","add","options","method","body","JSON","stringify","headers","message","notificationShow","setTimeout","window","location","reload","customStyles","control","base","borderColor","isFocused","width","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBCard, MDBCardBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport Select from 'react-select';\r\nimport Notification from '../../misc/sections/Notification';\r\n\r\n\r\n\r\nclass EditUserModal extends Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalShow: false,\r\n            userId: '',\r\n            role_id: '',\r\n            role: '',\r\n            name: '',\r\n            email: '',\r\n            cell: '',\r\n            username: '',\r\n            password: '',\r\n            roles: '',\r\n            roleOptions: [],\r\n            message: '',\r\n            notificationShow: false\r\n        }\r\n        // this.deleteProduct = this.deleteProduct.bind(this);\r\n    }\r\n    fetchData = (id) => {\r\n        this._isMounted = true\r\n        fetch('/getSpecificUser/' + id)\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                // console.log(json)\r\n                var user = json.data\r\n                if (this._isMounted === true) {\r\n                    this.setState({\r\n                        user: user,\r\n                        userId: user.id,\r\n                        role_id: user.role_id,\r\n                        name: user.name,\r\n                        email: user.email,\r\n                        cell: user.cell,\r\n                        username: user.username,\r\n                        password: user.password,\r\n                    })\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n        fetch('/getAllRoles')\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                // console.log(json)\r\n                if (this._isMounted) {\r\n                    this.setState({ roles: json.data })\r\n                }\r\n                this.setRoleOptions(json.data);\r\n            })\r\n            .catch((error) => console.log(error))\r\n\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        this._isMounted = false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modalShow: !this.state.modalShow,\r\n\r\n        });\r\n    }\r\n\r\n    setRoleOptions = (roles) => {\r\n        let roleOptions = roles.map(role => ({ key: role.id, label: role.name, value: role.id }));\r\n        let currentRole;\r\n        roles.forEach(role => {\r\n            if (role.id.toString() === this.state.role_id) {\r\n                currentRole = { label: role.name, value: role.id }\r\n            }\r\n        });\r\n        this.setState({\r\n            roleOptions: roleOptions, role: currentRole,\r\n        })\r\n    }\r\n\r\n    handleInput = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSelectChange = selectedOption => {\r\n        this.setState({\r\n            role: selectedOption\r\n        })\r\n\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let form = this.refs.updateUserForm\r\n        if (form.checkValidity() === false) {\r\n            form.classList.add('was-validated');\r\n        }\r\n        else if (this.state.role === '' || this.state.role === null) {\r\n            this.setState({ role: null })\r\n            return\r\n        }\r\n        else {\r\n            let name = this.state.name\r\n            let email = this.state.email\r\n            let cell = this.state.cell\r\n            let username = this.state.username\r\n            let password = this.state.password\r\n            let role = this.state.role.value\r\n            let userId = this.state.userId\r\n\r\n            // console.log(userId, name, email, cell, username, password, role);\r\n            let user = { id: userId, name: name, email: email, cell: cell, username: username, password: password, role: role }\r\n\r\n            var options = {\r\n                method: 'PUT',\r\n                body: JSON.stringify(user),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n            fetch('/updateUser', options)\r\n                .then((res) => res.json())\r\n                .then((json) => {\r\n                    console.log(json)\r\n                    if (this._isMounted === true) {\r\n                        this.setState({ message: json.message, notificationShow: true })\r\n                        setTimeout(() => this.setState({ notificationShow: false }), 1502);\r\n                    }\r\n\r\n                })\r\n                .catch((error) => console.log(error))\r\n            //closing edit modal\r\n\r\n            this.toggle()\r\n\r\n            // refreshing all records table\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { role, roleOptions } = this.state\r\n        const customStyles = {\r\n            control: (base, state) => ({\r\n                ...base,\r\n                borderColor: state.isFocused ?\r\n                    '#ddd' : role !== null ?\r\n                        '#ddd' : 'red',\r\n                width: '191px',\r\n            })\r\n        }\r\n\r\n\r\n        return (\r\n            <MDBContainer>\r\n                <MDBModal isOpen={this.state.modalShow} toggle={this.toggle} size='lg' centered>\r\n                    <MDBModalHeader toggle={this.toggle}>Edit User Details</MDBModalHeader>\r\n                    <MDBModalBody>\r\n\r\n                        <MDBCard className=' p-5'>\r\n                            <MDBCardBody className='p-2'>\r\n\r\n                                <form ref='updateUserForm' onSubmit={this.handleSubmit} noValidate>\r\n                                    <div className=\"grey-text\">\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.name}\r\n                                            label=\"Name\"\r\n                                            name='name'\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.email}\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            icon=\"envelope\"\r\n                                            group\r\n                                            type=\"email\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.cell}\r\n                                            label=\"Phone\"\r\n                                            name=\"cell\"\r\n                                            icon=\"phone\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.username}\r\n                                            label=\"Username\"\r\n                                            name=\"username\"\r\n                                            inputRef={el => { this.username = el }}\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            required\r\n                                        />\r\n                                        <MDBInput\r\n                                            onInput={this.handleInput}\r\n                                            value={this.state.password}\r\n                                            label=\"Password\"\r\n                                            name=\"password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            validate\r\n                                            required>\r\n                                            {/* <MDBIcon icon=\"home\" style={{ float: 'left' }} /> */}\r\n                                        </MDBInput>\r\n                                        {/* {showOptions ? */}\r\n                                        <div className=''>\r\n                                            <Select\r\n                                                styles={customStyles}\r\n                                                // defaultValue={currentRole}\r\n                                                value={this.state.role}\r\n                                                onChange={this.handleSelectChange}\r\n                                                options={roleOptions}\r\n                                                placeholder='Role'\r\n                                                isSearchable\r\n                                                isClearable\r\n                                            />\r\n                                        </div>\r\n                                        {/* : null */}\r\n                                        {/* } */}\r\n                                    </div>\r\n                                    <div className='text-right'>\r\n\r\n                                        <MDBBtn size='sm' className='px-2 font-weight-bold' color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\r\n                                        <MDBBtn size='sm' className='px-2 font-weight-bold' onClick={this.handleSubmit} outline color=\"primary\">Save updates</MDBBtn>\r\n                                    </div>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                            {\r\n                                this.state.notificationShow ?\r\n                                    <Notification\r\n                                        message={this.state.message}\r\n                                    />\r\n                                    : null\r\n                            }\r\n                        </MDBCard>\r\n\r\n\r\n                    </MDBModalBody>\r\n                    <MDBModalFooter>\r\n                    </MDBModalFooter>\r\n                </MDBModal>\r\n            </MDBContainer >\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditUserModal;"]},"metadata":{},"sourceType":"module"}