{"ast":null,"code":"import { AbilityBuilder } from \"@casl/ability\";\nvar roles;\nvar permissions;\nvar rolePermissions;\nfetch('/getAllRoles').then(function (res) {\n  return res.json();\n}).then(function (json) {\n  console.log(json);\n  roles = json.data;\n})[\"catch\"](function (err) {\n  console.log(err);\n});\nfetch('/getAllPermissions').then(function (res) {\n  return res.json();\n}).then(function (json) {\n  console.log(json);\n  permissions = json.data;\n})[\"catch\"](function (err) {\n  console.log(err);\n});\nfetch('/getAllRolesPermissions').then(function (res) {\n  return res.json();\n}).then(function (json) {\n  console.log(json);\n  rolePermissions = json.data;\n})[\"catch\"](function (err) {\n  console.log(err);\n});\nexport default function defineRulesFor(role) {\n  var _AbilityBuilder$extra = AbilityBuilder.extract(),\n      can = _AbilityBuilder$extra.can,\n      rules = _AbilityBuilder$extra.rules; //finding user's role\n\n\n  var userRoleId,\n      userRolePermissions,\n      userPermissions = [];\n\n  if (roles !== undefined && role !== undefined) {\n    console.log('1');\n    roles.forEach(function (Role) {\n      console.log(Role.name);\n      console.log(role);\n\n      if (Role.name === role) {\n        userRoleId = Role.id;\n      }\n    });\n    console.log(userRoleId); //getting permissions against that role\n\n    if (rolePermissions !== undefined && userRoleId !== undefined) {\n      console.log('2');\n      userRolePermissions = rolePermissions.filter(function (rolePermission) {\n        return rolePermission.role_id === userRoleId;\n      });\n    }\n\n    console.log(userRolePermissions); //getting user's permissions\n\n    if (userRolePermissions !== undefined && permissions !== undefined) {\n      console.log('3');\n      userRolePermissions.forEach(function (rolePermission) {\n        permissions.forEach(function (permission) {\n          if (permission.id === rolePermission.permission_id) {\n            userPermissions.push(permission);\n          }\n        });\n      });\n    }\n\n    console.log(userPermissions); // defining rules for user\n\n    if (userPermissions !== [] && userPermissions !== undefined) {\n      for (var index = 0; index < userPermissions.length; index++) {\n        can(\"\".concat(userPermissions[index].permission), \"\".concat(userPermissions[index].entity));\n        console.log(\"\".concat(userPermissions[index].permission), \"\".concat(userPermissions[index].entity));\n      }\n    }\n  }\n\n  return rules;\n}","map":{"version":3,"sources":["D:\\mzamal\\sales&stock\\sales\\src\\configs\\Ability.js"],"names":["AbilityBuilder","roles","permissions","rolePermissions","fetch","then","res","json","console","log","data","err","defineRulesFor","role","extract","can","rules","userRoleId","userRolePermissions","userPermissions","undefined","forEach","Role","name","id","filter","rolePermission","role_id","permission","permission_id","push","index","length","entity"],"mappings":"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","sourcesContent":["import { AbilityBuilder } from \"@casl/ability\";\r\n\r\nlet roles;\r\nlet permissions;\r\nlet rolePermissions;\r\nfetch('/getAllRoles')\r\n    .then((res) => res.json())\r\n    .then((json) => {\r\n        console.log(json)\r\n        roles = json.data\r\n    })\r\n    .catch((err => {\r\n        console.log(err);\r\n    }))\r\nfetch('/getAllPermissions')\r\n    .then((res) => res.json())\r\n    .then((json) => {\r\n        console.log(json)\r\n        permissions = json.data\r\n    })\r\n    .catch((err => {\r\n        console.log(err);\r\n    }))\r\n\r\nfetch('/getAllRolesPermissions')\r\n    .then((res) => res.json())\r\n    .then((json) => {\r\n        console.log(json)\r\n        rolePermissions = json.data\r\n    })\r\n    .catch((err => {\r\n        console.log(err);\r\n    }))\r\n\r\nexport default function defineRulesFor(role) {\r\n    const { can, rules } = AbilityBuilder.extract();\r\n\r\n    //finding user's role\r\n    let userRoleId, userRolePermissions, userPermissions = []\r\n    if (roles !== undefined && role !== undefined) {\r\n        console.log('1');\r\n\r\n        roles.forEach(Role => {\r\n            console.log(Role.name);\r\n            console.log(role);\r\n\r\n            if (Role.name === role) {\r\n                userRoleId = Role.id\r\n            }\r\n        })\r\n        console.log(userRoleId);\r\n\r\n        //getting permissions against that role\r\n        if (rolePermissions !== undefined && userRoleId !== undefined) {\r\n            console.log('2');\r\n            userRolePermissions = rolePermissions.filter(rolePermission => rolePermission.role_id === userRoleId)\r\n        }\r\n\r\n        console.log(userRolePermissions);\r\n\r\n        //getting user's permissions\r\n        if (userRolePermissions !== undefined && permissions !== undefined) {\r\n            console.log('3');\r\n\r\n            userRolePermissions.forEach(rolePermission => {\r\n                permissions.forEach(permission => {\r\n                    if (permission.id === rolePermission.permission_id) {\r\n                        userPermissions.push(permission)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        console.log(userPermissions);\r\n\r\n        // defining rules for user\r\n        if (userPermissions !== [] && userPermissions !== undefined) {\r\n            for (let index = 0; index < userPermissions.length; index++) {\r\n                can(`${userPermissions[index].permission}`, `${userPermissions[index].entity}`)\r\n                console.log(`${userPermissions[index].permission}`, `${userPermissions[index].entity}`);\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    return rules;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}